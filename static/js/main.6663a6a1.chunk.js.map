{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","react_default","a","createElement","className","src","logo","alt","react_plotly_default","data","type","x","y","layout","width","height","title","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"6RAgCeA,0LAzBX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCN,EAAAC,EAAAC,cAAA,0BAIFF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CACAO,KAAM,CAEJ,CACEC,KAAM,MACNC,EAAG,CAAC,gBAAgB,iBAAiB,kBAAkB,eAAe,kBAAkB,aAAa,iBAAiB,mBAAmB,aAAa,cAAc,QAAQ,SAAS,gBAAgB,iBAAiB,UAAU,WAAW,mBAAmB,iBAAiB,gBAAgB,YAAY,aAAa,UAAU,cAAc,cAAc,kBAAkB,aAAa,aAAa,eAAe,kBAAkB,QAAQ,kBAAkB,UAAU,iBAAiB,gBAAgB,iBAAiB,iBAAiB,oBAAoB,2BAA2B,KAAK,eAAe,gBAAgB,WAAW,YAAY,YAAY,kBAAkB,cAAc,aAAa,kBAAkB,OAAO,aAAa,QAAQ,eAAe,QAAQ,aAAa,aAAa,WAAW,iBAAiB,mBAAmB,QAAQ,eAAe,YAAY,gBAAgB,cAAc,QACp4BC,EAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,MAErMC,OAAS,CAACC,MAAO,IAAMC,OAAQ,IAAMC,MAAO,2BAnBpCC,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.6663a6a1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Plot from 'react-plotly.js';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <p>\r\n            Hello World!\r\n          </p>\r\n        </header>\r\n        <div>\r\n          <Plot\r\n          data={[\r\n            \r\n            {\r\n              type: 'bar', \r\n              x: [\"Ashley Powell\",\"Birdie Kirkman\",\"Brian Thornburg\",\"Bryan Martin\",\"Bubba Rosenbaum\",\"Cam pearce\",\"Cameron Powell\",\"Carson Edmiston \",\"Chris Dunn\",\"Chuck Mauro\",\"conan\",\"Dave O\",\"Dave Obringer\",\"David Campbell\",\"David E\",\"Deb Love\",\"Dustin Stollmack\",\"Gary Rosenbaum\",\"Gregory Burke\",\"Hal Pratt\",\"Holli Rehm\",\"J. Brim\",\"Jeff Howard\",\"Jeff Mattox\",\"Jeffrey Perkins\",\"Jen Powell\",\"Jim Pearce\",\"John Bradley\",\"Jonathon Powell\",\"JRK#1\",\"Julie Chenoweth\",\"Kathy N\",\"Katie Edmiston\",\"Kevin Monahan\",\"Kim Stephenson\",\"Larry Rocamora\",\"Linda T. Maultsby\",\"Logan of the Hill People\",\"LT\",\"Maddy Pearce\",\"Mark Bozymski\",\"Mark Ray\",\"Mel Black\",\"Mel Black\",\"Mike Edmiston 1\",\"Mike Werner\",\"Miles Dunn\",\"Paul Stephenson\",\"Pete\",\"Pete's Dad\",\"Roger\",\"Russell Goto\",\"Sam S\",\"Sequoia#12\",\"Sequoia#12\",\"Sharon E\",\"Sherry Stuckey\",\"Terry Holthauser\",\"Tim M\",\"Tim Rabalais\",\"Tom Mills\",\"turd ferguson\",\"Uncle Rusty\",\"Zach\"],\r\n              y: [24,17,27,21,34,32,28,24,29,17,21,18,17,16,19,21,20,21,18,19,21,25,25,20,31,15,16,32,26,25,30,33,24,33,31,17,29,12,30,19,32,18,21,24,19,24,21,25,21,18,25,21,24,22,22,27,19,20,24,31,18,21,22,19]},\r\n          ]}\r\n          layout={ {width: 1000, height: 1000, title: 'A Fancy Plot'} }\r\n        />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}