{"version":3,"sources":["common/api-config.js","common/spreadsheet.js","common/helper.js","components/BowlPool.js","components/WinsBar.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["api_config","apiKey","discoveryDocs","spreadsheetId","load","callback","window","gapi","client","sheets","spreadsheets","values","get","config","range","then","response","bowlPool","sheet","games","gamesArray","i","length","push","createGamesObject","winners","winnersArray","createWinnersObject","players","playersObject","playerNum","player","playerName","picks","wins","name","createPlayerObjects","slice","parseSheet","result","error","Component","WinsBar","state","initClient","init","_this","onLoad","data","setState","_this$state","this","react_default","a","createElement","index_esm","width","height","chartType","loader","bowlPoolData","winsBarData","p","parseInt","getWinsBarData","options","title","hAxis","minValue","vAxis","App","className","src","logo","alt","components_WinsBar","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__"],"mappings":"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","file":"static/js/main.200074a2.chunk.js","sourcesContent":["export default {\r\n    apiKey: \"AIzaSyB8-wy0DJ-w95vCGoMbEbpn0jVmX4IxHoQ\",\r\n    discoveryDocs: \r\n      [\"https://sheets.googleapis.com/$discovery/rest?version=v4\"],\r\n    spreadsheetId: \"12K-dZ5_FnyVbcPrqWmjDDBodOyKIJ1Zi_EOaXCTz2G0\"\r\n  };","import config from \"./api-config\";\r\nimport { parseSheet } from \"./helper\";\r\n\r\nexport function load(callback) {\r\n  window.gapi.client.load(\"sheets\", \"v4\", () => {\r\n    window.gapi.client.sheets.spreadsheets.values\r\n      .get({\r\n        spreadsheetId: config.spreadsheetId,\r\n        range: \"A1:AZ100\"\r\n      })\r\n      .then(\r\n        response => {\r\n          const data = response.result.values;\r\n          const bowlPool = parseSheet(data) || [];\r\n          callback({\r\n            bowlPool\r\n          });\r\n        },\r\n        response => {\r\n          callback(false, response.result.error);\r\n        }\r\n      );\r\n  });\r\n}","import config from \"./api-config\";\r\n\r\n\r\nexport function parseSheet(sheet) {\r\n    var values = sheet;\r\n    var games = createGamesObject(values[0]);\r\n    var winners = createWinnersObject(values[3]);\r\n    var players = createPlayerObjects(values.slice(3));\r\n\r\n    var bowl = {\r\n        games: games,\r\n        winners: winners,\r\n        players: players\r\n    };\r\n\r\n    return bowl;\r\n}\r\nexport function getWinsBarData(bowlPoolData) {\r\n    var winsBarData = [[\"Player\",\"Wins\"]];\r\n    for (var p in bowlPoolData.players) {\r\n        var player = bowlPoolData.players[p]\r\n        winsBarData.push([player.name,parseInt(player.wins)]);\r\n    }\r\n    return winsBarData;\r\n}\r\n\r\nfunction createGamesObject(games) {\r\n    var gamesArray = [];\r\n    for(var i = 0; i < games.length; i++) {\r\n        if (i < 2) {\r\n            // First Two values aren't games\r\n            continue;\r\n        }\r\n        gamesArray.push(games[i])\r\n        \r\n        \r\n    }\r\n    return gamesArray;\r\n}\r\n\r\nfunction createWinnersObject(winners) {\r\n    var winnersArray = [];\r\n\r\n    for(var i = 0; i < winners.length; i++) {\r\n        if (i < 2) {\r\n            // First Two values aren't games\r\n            continue;\r\n        }\r\n        \r\n        winnersArray.push(winners[i])\r\n        \r\n    }\r\n    return winnersArray;\r\n}\r\n\r\nfunction createPlayerObjects(players) {\r\n    var playersObject = {};\r\n    for (var playerNum in players) {\r\n        var player = players[playerNum];\r\n        var playerName = player[0];\r\n        playersObject[playerName] = { picks: [], wins : 0};\r\n        for(var i = 0; i < player.length; i++) {\r\n            if (i === 0 ) {\r\n                playersObject[playerName].name = player[0];\r\n            } else if (i === 1) {\r\n                playersObject[playerName].wins = player[i];\r\n            } else {\r\n                playersObject[playerName].picks.push(player[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    return playersObject;\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport Chart from 'react-google-charts';\r\nimport config from \"../common/api-config\";\r\nimport { load } from \"../common/spreadsheet\"\r\nclass BowlPool extends Component {\r\n\r\n  state = {\r\n    bowlPool: {},\r\n    error: null\r\n  }\r\n\r\n  render() {\r\n    const {bowlPool, error} = this.state\r\n    if (bowlPool.games) {\r\n      return <div>{this.state.error}</div>;\r\n    }\r\n    return (\r\n      <div></div>\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    // 1. Load the JavaScript client library.\r\n    window.gapi.load(\"client\", this.initClient);\r\n  }\r\n\r\n  initClient = () => {\r\n    // 2. Initialize the JavaScript client library.\r\n    window.gapi.client\r\n      .init({\r\n        apiKey: config.apiKey,\r\n        // Your API key will be automatically added to the Discovery Document URLs.\r\n        discoveryDocs: config.discoveryDocs\r\n      })\r\n      .then(() => {\r\n      // 3. Initialize and make the API request.\r\n      load(this.onLoad);\r\n    });\r\n  };\r\n\r\n  onLoad = (data, error) => {\r\n    if (data) {\r\n      const bowlPool = data.bowlPool;\r\n      this.setState({ bowlPool });\r\n    } else {\r\n      this.setState({ error });\r\n    }\r\n  };\r\n}\r\n\r\nexport default BowlPool","import React, { Component } from 'react';\r\nimport Chart from 'react-google-charts';\r\nimport config from \"../common/api-config\";\r\nimport { load } from \"../common/spreadsheet\";\r\nimport { getWinsBarData } from \"../common/helper\";\r\nclass WinsBar extends Component {\r\n\r\n  state = {\r\n    bowlPool: {},\r\n    error: null\r\n  }\r\n\r\n  render() {\r\n    const {bowlPool, error} = this.state\r\n    if (bowlPool.games) {\r\n      return <Chart\r\n            width={'500px'}\r\n            height={'1000px'}\r\n            chartType=\"BarChart\"\r\n            loader={<div>Loading Chart</div>}\r\n            data = {getWinsBarData(bowlPool)}\r\n            options={{\r\n                title: 'Wins by Player',\r\n                hAxis: {\r\n                title: 'Wins',\r\n                minValue: 0,\r\n                },\r\n                vAxis: {\r\n                title: 'Player Name',\r\n                },\r\n            }}\r\n      />\r\n    }\r\n    return (\r\n      <div></div>\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    // 1. Load the JavaScript client library.\r\n    window.gapi.load(\"client\", this.initClient);\r\n  }\r\n\r\n  initClient = () => {\r\n    // 2. Initialize the JavaScript client library.\r\n    window.gapi.client\r\n      .init({\r\n        apiKey: config.apiKey,\r\n        // Your API key will be automatically added to the Discovery Document URLs.\r\n        discoveryDocs: config.discoveryDocs\r\n      })\r\n      .then(() => {\r\n      // 3. Initialize and make the API request.\r\n      load(this.onLoad);\r\n    });\r\n  };\r\n\r\n  onLoad = (data, error) => {\r\n    if (data) {\r\n      const bowlPool = data.bowlPool;\r\n      this.setState({ bowlPool });\r\n    } else {\r\n      this.setState({ error });\r\n    }\r\n  };\r\n}\r\n\r\nexport default WinsBar","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport BowlPool from './components/BowlPool';\r\nimport WinsBar from './components/WinsBar';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <p>\r\n            Hello World!\r\n          </p>\r\n        </header>\r\n        <WinsBar />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}